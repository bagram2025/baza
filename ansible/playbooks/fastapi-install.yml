---
- name: Install FastAPI Application
  hosts: localhost
  connection: local
  become: yes
  
  vars:
    fastapi_port: 8001
    fastapi_app_name: "baza-fastapi"
    project_user: "ubuntuuser"
    project_path: "/home/ubuntuuser/baza"
    fastapi_venv_path: "/home/ubuntuuser/venv-fastapi"

  tasks:
    - name: Install Python and dependencies
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
        state: present

    - name: Create virtual environment for FastAPI
      become_user: "{{ project_user }}"
      command:
        cmd: python3 -m venv {{ fastapi_venv_path }}
        creates: "{{ fastapi_venv_path }}/bin/activate"

    - name: Install FastAPI packages
      become_user: "{{ project_user }}"
      pip:
        name:
          - fastapi
          - uvicorn[standard]
        virtualenv: "{{ fastapi_venv_path }}"

    - name: Create FastAPI app directory
      file:
        path: "{{ project_path }}/api"
        state: directory
        owner: "{{ project_user }}"
        group: "{{ project_user }}"

    - name: Deploy FastAPI application
      copy:
        content: |
          from fastapi import FastAPI, HTTPException
          from datetime import datetime
          import os

          app = FastAPI(
              title="Baza FastAPI",
              description="API для проекта Baza",
              version="1.0.0",
              docs_url="/docs",
              redoc_url="/redoc"
          )

          # Хранилище в памяти
          items = [
              {"id": 0, "name": "Ноутбук", "price": 999.99, "category": "электроника"},
              {"id": 1, "name": "Телефон", "price": 699.99, "category": "электроника"},
              {"id": 2, "name": "Книга", "price": 29.99, "category": "образование"}
          ]

          @app.get("/")
          async def root():
              return {
                  "message": "Baza FastAPI работает!",
                  "timestamp": datetime.now().isoformat(),
                  "endpoints": [
                      "/docs - документация",
                      "/health - статус сервиса", 
                      "/items - список товаров",
                      "/items/{id} - товар по ID"
                  ]
              }

          @app.get("/health")
          async def health():
              return {
                  "status": "healthy",
                  "service": "fastapi",
                  "port": {{ fastapi_port }},
                  "timestamp": datetime.now().isoformat()
              }

          @app.get("/items")
          async def get_items():
              return {"items": items, "count": len(items)}

          @app.get("/items/{item_id}")
          async def get_item(item_id: int):
              if item_id < 0 or item_id >= len(items):
                  raise HTTPException(status_code=404, detail="Товар не найден")
              return items[item_id]

          @app.get("/info")
          async def system_info():
              return {
                  "python": os.sys.version,
                  "platform": os.sys.platform,
                  "server_time": datetime.now().isoformat()
              }

          print("✅ FastAPI приложение загружено")
        dest: "{{ project_path }}/api/main.py"
        owner: "{{ project_user }}"
        group: "{{ project_user }}"
        mode: '0644'

    - name: Create systemd service
      copy:
        content: |
          [Unit]
          Description=Baza FastAPI Service
          After=network.target
          Wants=network.target

          [Service]
          Type=exec
          User={{ project_user }}
          Group={{ project_user }}
          WorkingDirectory={{ project_path }}/api
          Environment=PATH={{ fastapi_venv_path }}/bin
          ExecStart={{ fastapi_venv_path }}/bin/uvicorn main:app --host 0.0.0.0 --port {{ fastapi_port }}
          Restart=always
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/{{ fastapi_app_name }}.service
        mode: '0644'

    - name: Enable and start FastAPI service
      systemd:
        name: "{{ fastapi_app_name }}"
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Wait for FastAPI to start
      wait_for:
        port: "{{ fastapi_port }}"
        host: 127.0.0.1
        timeout: 20

    - name: Test FastAPI
      command: curl -s http://127.0.0.1:{{ fastapi_port }}/health
      register: api_test
      changed_when: false

    - name: Show result
      debug:
        msg: "FastAPI установлен и работает: {{ api_test.stdout }}"
